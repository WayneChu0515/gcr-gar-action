name: DEV CICD

on:
  push:
    branches:
      - master

env:
  PROJECT_ID: invest-auto-377214
  GKE_SA_KEY: ${{ secrets.GKE_SA_KEY }}
  GKE_CLUSTER: cluster-1
  GKE_ZONE: asia-east1-a
  GAR_ZONE: asia-east1-docker.pkg.dev
  DEPLOYMENT_NAME: gcr-gar-svc-app # TODO: update to deployment name
  IMAGE_FOLDER: gcr-gar-svc
  IMAGE: server


jobs:
  Lint-Test-Build-Deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      
      # - name: Install project dependencies
      #   run: yarn --prefer-offline

      # - name: Run lint
      #   run: yarn lint

      # Setup gcloud CLI
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ env.GKE_SA_KEY }}'

      - name: Login to GAR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GAR_ZONE }}
          username: _json_key
          password: ${{ env.GKE_SA_KEY }}

      - uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker $GAR_ZONE

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: try pull builder cache
        continue-on-error: true
        run: |-
          docker pull $GAR_ZONE/$PROJECT_ID/$IMAGE_FOLDER/$IMAGE/builder:latest
            .

      - name: Build runtime
        run: |-
          docker build \
            --cache-from $GAR_ZONE/$PROJECT_ID/$IMAGE_FOLDER/$IMAGE/builder:latest \
            --tag "$GAR_ZONE/$PROJECT_ID/$IMAGE_FOLDER/$IMAGE" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          gcloud --quiet auth configure-docker $GAR_ZONE
          docker build -t $GAR_ZONE/$PROJECT_ID/$IMAGE_FOLDER/node:18 .
          docker push "$GAR_ZONE/$PROJECT_ID/$IMAGE_FOLDER/node:18"

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          ./kustomize edit set image $GAR_ZONE/PROJECT_ID/$IMAGE_FOLDER/IMAGE:TAG=$GAR_ZONE/$PROJECT_ID/$IMAGE_FOLDER/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide

      - name: Publish cache
        run: |-
          docker push "$GAR_ZONE/$PROJECT_ID/$IMAGE_FOLDER/$IMAGE/builder:latest"
          docker push "$GAR_ZONE/$PROJECT_ID/$IMAGE_FOLDER/$IMAGE/builder:$GITHUB_SHA"

